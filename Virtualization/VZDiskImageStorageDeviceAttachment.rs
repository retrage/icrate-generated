//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::Virtualization::*;

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct VZDiskImageCachingMode(pub NSInteger);
impl VZDiskImageCachingMode {
    #[doc(alias = "VZDiskImageCachingModeAutomatic")]
    pub const Automatic: Self = Self(0);
    #[doc(alias = "VZDiskImageCachingModeUncached")]
    pub const Uncached: Self = Self(1);
    #[doc(alias = "VZDiskImageCachingModeCached")]
    pub const Cached: Self = Self(2);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for VZDiskImageCachingMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for VZDiskImageCachingMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct VZDiskImageSynchronizationMode(pub NSInteger);
impl VZDiskImageSynchronizationMode {
    #[doc(alias = "VZDiskImageSynchronizationModeFull")]
    pub const Full: Self = Self(1);
    #[doc(alias = "VZDiskImageSynchronizationModeFsync")]
    pub const Fsync: Self = Self(2);
    #[doc(alias = "VZDiskImageSynchronizationModeNone")]
    pub const None: Self = Self(3);
}

#[cfg(feature = "objc2")]
unsafe impl Encode for VZDiskImageSynchronizationMode {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

#[cfg(feature = "objc2")]
unsafe impl RefEncode for VZDiskImageSynchronizationMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Virtualization_VZStorageDeviceAttachment")]
    pub struct VZDiskImageStorageDeviceAttachment;

    #[cfg(feature = "Virtualization_VZStorageDeviceAttachment")]
    unsafe impl ClassType for VZDiskImageStorageDeviceAttachment {
        #[inherits(NSObject)]
        type Super = VZStorageDeviceAttachment;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "Virtualization_VZStorageDeviceAttachment")]
unsafe impl NSObjectProtocol for VZDiskImageStorageDeviceAttachment {}

extern_methods!(
    #[cfg(feature = "Virtualization_VZStorageDeviceAttachment")]
    unsafe impl VZDiskImageStorageDeviceAttachment {
        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method_id(@__retain_semantics Init initWithURL:readOnly:error:_)]
        pub unsafe fn initWithURL_readOnly_error(
            this: Allocated<Self>,
            url: &NSURL,
            read_only: bool,
        ) -> Result<Id<Self>, Id<NSError>>;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method_id(@__retain_semantics Init initWithURL:readOnly:cachingMode:synchronizationMode:error:_)]
        pub unsafe fn initWithURL_readOnly_cachingMode_synchronizationMode_error(
            this: Allocated<Self>,
            url: &NSURL,
            read_only: bool,
            caching_mode: VZDiskImageCachingMode,
            synchronization_mode: VZDiskImageSynchronizationMode,
        ) -> Result<Id<Self>, Id<NSError>>;

        #[cfg(feature = "Foundation_NSURL")]
        #[method_id(@__retain_semantics Other URL)]
        pub unsafe fn URL(&self) -> Id<NSURL>;

        #[method(isReadOnly)]
        pub unsafe fn isReadOnly(&self) -> bool;

        #[method(cachingMode)]
        pub unsafe fn cachingMode(&self) -> VZDiskImageCachingMode;

        #[method(synchronizationMode)]
        pub unsafe fn synchronizationMode(&self) -> VZDiskImageSynchronizationMode;
    }
);

extern_methods!(
    /// Methods declared on superclass `VZStorageDeviceAttachment`
    #[cfg(feature = "Virtualization_VZStorageDeviceAttachment")]
    unsafe impl VZDiskImageStorageDeviceAttachment {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Id<Self>;
    }
);
