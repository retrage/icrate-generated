//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::Virtualization::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Virtualization_VZStorageDeviceAttachment")]
    pub struct VZNetworkBlockDeviceStorageDeviceAttachment;

    #[cfg(feature = "Virtualization_VZStorageDeviceAttachment")]
    unsafe impl ClassType for VZNetworkBlockDeviceStorageDeviceAttachment {
        #[inherits(NSObject)]
        type Super = VZStorageDeviceAttachment;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "Virtualization_VZStorageDeviceAttachment")]
unsafe impl NSObjectProtocol for VZNetworkBlockDeviceStorageDeviceAttachment {}

extern_methods!(
    #[cfg(feature = "Virtualization_VZStorageDeviceAttachment")]
    unsafe impl VZNetworkBlockDeviceStorageDeviceAttachment {
        #[cfg(all(
            feature = "Foundation_NSDate",
            feature = "Foundation_NSError",
            feature = "Foundation_NSURL",
            feature = "Virtualization_VZDiskSynchronizationMode"
        ))]
        #[method_id(@__retain_semantics Init initWithURL:timeout:forcedReadOnly:synchronizationMode:error:_)]
        pub unsafe fn initWithURL_timeout_forcedReadOnly_synchronizationMode_error(
            this: Allocated<Self>,
            url: &NSURL,
            timeout: NSTimeInterval,
            forced_read_only: bool,
            synchronization_mode: VZDiskSynchronizationMode,
        ) -> Result<Id<Self>, Id<NSError>>;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method_id(@__retain_semantics Init initWithURL:error:_)]
        pub unsafe fn initWithURL_error(
            this: Allocated<Self>,
            url: &NSURL,
        ) -> Result<Id<Self>, Id<NSError>>;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method(validateURL:error:_)]
        pub unsafe fn validateURL_error(url: &NSURL) -> Result<(), Id<NSError>>;

        #[cfg(feature = "Foundation_NSURL")]
        #[method_id(@__retain_semantics Other URL)]
        pub unsafe fn URL(&self) -> Id<NSURL>;

        #[cfg(feature = "Foundation_NSDate")]
        #[method(timeout)]
        pub unsafe fn timeout(&self) -> NSTimeInterval;

        #[method(isForcedReadOnly)]
        pub unsafe fn isForcedReadOnly(&self) -> bool;

        #[cfg(feature = "Virtualization_VZDiskSynchronizationMode")]
        #[method(synchronizationMode)]
        pub unsafe fn synchronizationMode(&self) -> VZDiskSynchronizationMode;

        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Id<ProtocolObject<dyn VZNetworkBlockDeviceStorageDeviceAttachmentDelegate>>>;

        #[method(setDelegate:)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<
                &ProtocolObject<dyn VZNetworkBlockDeviceStorageDeviceAttachmentDelegate>,
            >,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `VZStorageDeviceAttachment`
    #[cfg(feature = "Virtualization_VZStorageDeviceAttachment")]
    unsafe impl VZNetworkBlockDeviceStorageDeviceAttachment {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Id<Self>;
    }
);

extern_protocol!(
    pub unsafe trait VZNetworkBlockDeviceStorageDeviceAttachmentDelegate:
        NSObjectProtocol
    {
        #[cfg(feature = "Virtualization_VZStorageDeviceAttachment")]
        #[optional]
        #[method(attachmentWasConnected:)]
        unsafe fn attachmentWasConnected(
            &self,
            attachment: &VZNetworkBlockDeviceStorageDeviceAttachment,
        );

        #[cfg(all(
            feature = "Foundation_NSError",
            feature = "Virtualization_VZStorageDeviceAttachment"
        ))]
        #[optional]
        #[method(attachment:didEncounterError:)]
        unsafe fn attachment_didEncounterError(
            &self,
            attachment: &VZNetworkBlockDeviceStorageDeviceAttachment,
            error: &NSError,
        );
    }

    unsafe impl ProtocolType for dyn VZNetworkBlockDeviceStorageDeviceAttachmentDelegate {}
);
