//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::Virtualization::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Virtualization_VZBootLoader")]
    pub struct VZLinuxBootLoader;

    #[cfg(feature = "Virtualization_VZBootLoader")]
    unsafe impl ClassType for VZLinuxBootLoader {
        #[inherits(NSObject)]
        type Super = VZBootLoader;
        type Mutability = InteriorMutable;
    }
);

#[cfg(all(
    feature = "Foundation_NSObject",
    feature = "Virtualization_VZBootLoader"
))]
unsafe impl NSCopying for VZLinuxBootLoader {}

#[cfg(feature = "Virtualization_VZBootLoader")]
unsafe impl NSObjectProtocol for VZLinuxBootLoader {}

extern_methods!(
    #[cfg(feature = "Virtualization_VZBootLoader")]
    unsafe impl VZLinuxBootLoader {
        #[cfg(feature = "Foundation_NSURL")]
        #[method_id(@__retain_semantics Init initWithKernelURL:)]
        pub unsafe fn initWithKernelURL(this: Allocated<Self>, kernel_url: &NSURL) -> Id<Self>;

        #[cfg(feature = "Foundation_NSURL")]
        #[method_id(@__retain_semantics Other kernelURL)]
        pub unsafe fn kernelURL(&self) -> Id<NSURL>;

        #[cfg(feature = "Foundation_NSURL")]
        #[method(setKernelURL:)]
        pub unsafe fn setKernelURL(&self, kernel_url: &NSURL);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other commandLine)]
        pub unsafe fn commandLine(&self) -> Id<NSString>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setCommandLine:)]
        pub unsafe fn setCommandLine(&self, command_line: &NSString);

        #[cfg(feature = "Foundation_NSURL")]
        #[method_id(@__retain_semantics Other initialRamdiskURL)]
        pub unsafe fn initialRamdiskURL(&self) -> Option<Id<NSURL>>;

        #[cfg(feature = "Foundation_NSURL")]
        #[method(setInitialRamdiskURL:)]
        pub unsafe fn setInitialRamdiskURL(&self, initial_ramdisk_url: Option<&NSURL>);
    }
);

extern_methods!(
    /// Methods declared on superclass `VZBootLoader`
    #[cfg(feature = "Virtualization_VZBootLoader")]
    unsafe impl VZLinuxBootLoader {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Id<Self>;
    }
);
